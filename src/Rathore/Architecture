Architecture:


Consistent Hashing:
	Consistant hashing is the method with the help of which we can do Load Balancing.

Sharding:
	Partationing: when we use one key to distribute the load is called horizontal Partationing.
				  when we use column to distribute the load is called vertical Partationing.

	Sharding:
		Sharding is horizontal partationing which takes one key and distribute the load.


Rate Limiting:
	 for limiting the no. of hits per second.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Design Patterns
	○ Behavioural
	○ Creational
	○ Structural

------------------------------------------------------------------------------------------------------------------------------------------------------------------
UML Diagrams Importance:
Visualization: UML diagrams provide a visual representation of a system, making it
easier to understand the structure, relationships, and interactions between
components.
● Documentation: They serve as detailed documentation for the software
architecture, which is useful for maintaining and scaling the system.
● Communication: UML diagrams are a common language for software designers,
developers, and stakeholders, facilitating communication about the design.
● Standardization: Since UML is a standardized language, it ensures that everyone
involved understands the system’s design in the same way
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Basic Elements:
1. Class: A blueprint for objects, defined with a name, attributes, and methods.
	○ Example: class User { name, age, login() }
2. Interface: A contract that defines methods that a class must implement.
	○ Example: interface Loginable { login() }
3. Object: An instance of a class at runtime.
4. Association: A relationship between two classes that represents interactions between
objects.
5. Inheritance: Represents an "is-a" relationship, where a subclass inherits from a superclass.
6. Composition: A stronger association where one object is part of another and cannot exist
independently.
7. Aggregation: A weaker form of association where one object contains another, but they can
exist independently.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
For class representation + is for public foelds and - is for private fields
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Summary:
● Association: Objects are related but can exist independently.
● Aggregation: A weak "has-a" relationship where the contained objects can exist
independently.
● Composition: A strong "has-a" relationship where the contained objects cannot exist without
the container.
● Inheritance: A subclass inherits from a superclass (is-a relationship).
● Dependency: One class depends on another for its functionality.
● Realization: A class implements the behavior defined by an interface.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Encapsulation and Design Patterns:
○ Encapsulation forms the backbone of Creational Patterns like Singleton
and Builder, where object creation details are hidden.
○ Example: Singleton encapsulates the creation and access control to a
single instance of a class.
● Abstraction and Design Patterns:
○ Many patterns rely on abstraction, such as Factory Pattern and Abstract
Factory, where the client interacts with abstract interfaces.
○ Example: Factory Pattern abstracts the creation of objects by delegating it
to subclasses.
Inheritance and Design Patterns:
● Inheritance is key to Structural Patterns like Adapter and Decorator, where
behavior is added or adapted using subclassing.
● Example: Decorator Pattern uses inheritance to add responsibilities to objects
at runtime.
Polymorphism and Design Patterns:
● Behavioral Patterns like Strategy and Command use polymorphism to define
interchangeable behaviors.
● Example: Strategy Pattern allows different algorithms (polymorphic behavior) to
be swapped dynamically during runtime.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Types of Design Patterns:
Behavioral Patterns: Focus on communication between objects and responsibilities.
Examples: Observer Pattern, Strategy Pattern, Command Pattern
Creational Patterns: Deal with object creation mechanisms, trying to create objects
in a manner suitable to the situation.
Examples: Factory Pattern, Singleton Pattern, Builder Pattern
Structural Patterns: Deal with the composition of objects or classes to form larger
structures.
Examples: Adapter Pattern, Composite Pattern, Decorator Pattern

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Behavioral Patterns:
	1. Memento Pattern

Problem: How to provide undo/redo functionality or state restoration without
exposing the object's internal state and breaking encapsulation.
Solution: The Memento Pattern captures the internal state of an object in a
memento, allowing the object to restore its state later on without revealing internal
details.
Use Cases:
● Games: Saving the game state for load/reload functionality.
● Document Editors: Undo/redo functionality to navigate through document
changes.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Observer Pattern:
Problem: There is a need to notify multiple objects about a change in state without
tightly coupling them.
Solution: The Observer Pattern defines a one-to-many dependency. When one
object (the Subject) changes its state, all its dependents (the Observers) are notified
and updated automatically. This pattern is widely used for implementing distributed
event-handling systems, also known as the publish-subscribe pattern.
Observer Pattern Benefits:
Loose Coupling: The subject (e.g., WeatherStation) doesn’t need to know
about the specific observers. It just notifies them.
● Scalability: New observers (e.g., new display devices) can easily be added
without changing the subject.
● Flexibility: Observers can be dynamically added or removed at runtime.
Observer Pattern Use Cases:
Event Listeners: GUI frameworks often use the Observer Pattern to
implement event listeners for handling button clicks, input changes, etc.
● Stock Price Monitoring: When a stock price changes, multiple subscribers
(like investors or systems) can be notified of the change.
● News Publishing Systems: News articles are published (subject), and
subscribers (users) are notified whenever a new article is available.
● Social Media Notifications: Users can subscribe to updates from specific
accounts, and when an account posts (subject), all followers (observers) are
notified.
● Logging Systems: Different logging handlers can observe events and log
them as needed, such as to the console, file, or remote server.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Strategy Pattern:
Problem: Hardcoded algorithms in classes lead to:
○ Code duplication.
○ Increased maintenance complexity when switching between algorithms.
○ Violation of Open/Closed Principle: Modifications are required every
time a new algorithm is introduced.
Solution: The Strategy Pattern decouples the algorithm implementation from the
client, allowing easy switching of algorithms without altering the client code.
Strategy Pattern Structure:
Context: The client class that uses a strategy to perform an operation.
Strategy Interface: Defines the operations that all concrete strategies must
implement.
Concrete Strategy: Implements the actual algorithms, interchangeable based on the
context.

Strategy Pattern Use Case:
When to Use the Strategy Pattern:
● When multiple algorithms need to be used interchangeably.
● To avoid conditional statements (if-else or switch-case) in the client
code.
● When a class has multiple behaviors, which can vary independently

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Command Pattern: not important
Imagine you're developing a basic text editor with buttons for bold, italic, and
underline text formatting.
Without the Command Pattern, the buttons directly interact with the TextEditor
class, and you’d end up hardcoding behavior into the UI classes, making them tightly
coupled.

Problems in Code:
● Each button class is tightly coupled with the TextEditor. If the action
changes, all button classes need to be modified.
● It's harder to extend with new commands or add functionality such as
undo/redo or logging.

By introducing the Command Pattern, we can decouple the actions (bold, italic,
underline) from the UI components (buttons), making the design more flexible and
maintainable. The buttons no longer need to know about the editor directly but
instead work with generic Command objects.

Command Pattern Benefits:
● Decoupling of Invoker and Receiver: The button (invoker) doesn't know the
details of the TextEditor (receiver), making the system more flexible and
reusable.
● Command History and Undo: Commands can be logged for undo/redo
functionality.
● Task Queuing: Commands can be stored in a queue and executed later,
making it useful for task scheduling.
● Extensibility: New commands can be added easily without modifying existing
code. For example, adding a ChangeColorCommand only requires creating a
new command class.
Command Pattern Use Cases
GUI Applications:
● Commands can be associated with buttons, menus, and keyboard shortcuts in
applications like text editors, spreadsheets, or drawing software.
Task Scheduling:
● Commands can be placed in a queue and executed later, useful in batch
processing or deferred task execution.


------------------------------------------------------------------------------------------------------------------------------------------------------------------
Template Method Pattern:
Problem: Different parts of an algorithm may need to vary in subclasses, but the
overall structure should remain consistent.
Solution: The Template Method Pattern defines the skeleton of an algorithm in a
base class and lets subclasses override specific steps.
Structure:
● Abstract Class: Defines the algorithm skeleton.
● Concrete Subclasses: Override specific steps of the algorithm

Template Method Pattern Benefits:
Code Reuse: Common code is moved to the parent class, promoting reuse
and reducing duplication.
● Flexibility: Subclasses can vary certain steps in the algorithm, while keeping
the overall structure intact.
● Consistency: Ensures that the high-level structure of the algorithm remains
consistent, even when subclass behavior differs.

Use Cases of Template Method:
UI Frameworks: Rendering a UI element might follow a fixed set of steps (initialize, draw, finish),
but the details of how each element is drawn are left to subclasses.
Document Processing: A framework might define the skeleton for reading, processing, and
saving documents, while specific formats (e.g., Word, PDF) provide their own processing logic.
Game Development: A game loop (initialize, update, render) can be defined in a base class, with
specific games implementing their own logic for updating and rendering.
The Template Method Pattern is ideal for situations where a common algorithm exists, but some
steps may need to be redefined by subclasses. It helps enforce structure and promotes
reusability, while allowing flexibility where needed.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Iterator Pattern:
Problem: How to access elements in a collection without exposing its internal
representation.
Solution: The Iterator Pattern provides a way to traverse a collection without
revealing its underlying structure, offering a uniform interface for traversal.
Structure:
● Iterator: Interface for traversing a collection.
● Collection: Holds the elements and provides an iterator

Iterator Pattern Benefits:
Separation of Concerns: The traversal logic is separated from the collection
itself, allowing you to change one without affecting the other.
2. Uniform Interface: The same interface (Iterator) is used to traverse
different types of collections, making the code more flexible.
3. Simplified Client Code: The client doesn’t need to know the underlying data
structure, reducing coupling and making the code easier to maintain.
4. Multiple Traversal Strategies: You can implement multiple types of iterators
(e.g., forward, backward, filtered) without changing the collection.

Iterator Pattern Drawbacks
Additional Complexity: Implementing the iterator pattern can add extra layers of abstraction,
especially for small or simple collections where direct traversal is sufficient.
2. Increased Overhead: For small collections or when the structure is unlikely to change, the
overhead of creating iterators may not be justified.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
State Pattern:
You are tasked with building a DirectionService class for a navigation app. This class calculates the
estimated time of arrival (ETA) and provides directions between two points. The ETA and direction differ
based on the mode of transportation, which can be one of the following:
● Walking
● Cycling
● Car
● Train

Problems with our Code:
Tight Coupling and Complex Conditional Logic:
● The DirectionService likely uses conditional statements (if-else or switch-case) based
on transportation mode enums to determine how to calculate ETA and provide directions.
● As the number of transportation modes increases, the conditional logic becomes more complex
and harder to maintain.
Violation of the Open/Closed Principle:
● Adding new transportation modes (e.g., Airplane, Boat) requires modifying the existing
DirectionService class, which goes against the Open/Closed Principle (classes should be
open for extension but closed for modification).
Code Duplication and Reduced Maintainability:
● Similar code blocks for different transportation modes may lead to code duplication, making the
system less maintainable and more error-prone.
Scalability Issues:
● As more features or transportation modes are added, the class becomes bulky, impacting scalability
and readability.
State Pattern: Example:
UI Navigation
● Scenario: A mobile app UI where the navigation behavior changes based on
whether the user is logged in or not.
Example:
● States: LoggedInState, LoggedOutState.
● Context: The app's navigation system switches between these states
State Pattern Use Cases:
UI Components: Buttons that change behavior based on state (enabled,
disabled, pressed).
2. Vending Machines: States like waiting for money, dispensing product, or out
of stock.
3. TCP Connections: Changing behavior based on connection state (listening,
connected, closed).

------------------------------------------------------------------------------------------------------------------------------------------------------------------
Mediator Pattern:
Problem: Objects in a system need to communicate, but direct communication leads to tight
coupling and complexity.
Solution: The Mediator Pattern introduces a mediator object that handles all
communication between objects, reducing direct dependencies and coupling.
In our chat app, by introducing a Mediator object, we will decouple the users from knowing
about each other directly. The Mediator handles all communication, and the users
(colleagues) only interact with the Mediator. This simplifies the interaction and reduces
dependencies.

Mediator Pattern Code:
ChatMediator Interface: Declares the sendMessage method, which all mediators must
implement.
2. Concrete Mediator:
○ The ChatRoom class implements the ChatMediator interface. It holds a list of users and
handles message broadcasting.
3. User Class:
○ Each User object represents a participant in the chat. When a user sends a message, the
sendMessage method in the ChatRoom mediator is called, which distributes the message
to all users except the sender.
4. Communication:
○ Users interact only with the ChatRoom (mediator), which facilitates communication between
them, removing direct dependencies between individual users.
Mediator Pattern Benefits:
Reduces Complexity: The mediator centralizes communication, reducing direct dependencies
between objects.
● Loose Coupling: Colleagues only interact with the mediator, making them easier to manage,
extend, and maintain.
● Single Responsibility: The mediator handles complex communication logic, allowing colleagues
to focus on their own behavior.
● Centralized Control: Changes to communication rules can be made in the mediator without
affecting the colleagues.

Mediator Pattern in Real World:
Air Traffic Control:
Airplanes communicate through a central control tower (mediator) instead of coordinating directly
with each other.
GUI Component Coordination:
In GUI applications, multiple UI components may need to interact. For example, when a dropdown
changes, it may trigger updates to text fields, buttons, etc. A mediator can handle this interaction
logic instead of having the components know about each other directly.
Workflow Systems:
In a business process management system, a mediator can coordinate various activities across
multiple systems or departments.
M
------------------------------------------------------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------------------------------------------------------



