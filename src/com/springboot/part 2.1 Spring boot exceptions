
===============================================================================
        SPRING BOOT EXCEPTION HANDLING - ENHANCED COMPLETE CONCEPT GUIDE
===============================================================================

1. WHAT IS EXCEPTION HANDLING?
------------------------------
- Mechanism to handle runtime errors gracefully.
- Prevents application crash.
- Provides meaningful error messages to client.
- Improves API usability and debugging.

-------------------------------------------------------------------------------
2. KEY CONCEPTS IN SPRING BOOT EXCEPTION HANDLING
-------------------------------------------------------------------------------

  @RestControllerAdvice = @ControllerAdvice + @ResponseBody
  ---------------------

  @ControllerAdvice
  ------------------
  - A specialization of @Component for handling exceptions globally across all controllers.
  - Used to define centralized exception handling, data binding.
  - Helps avoid repetitive try-catch blocks in every controller.
  - Applies to all @Controller and @RestController classes.

  @ResponseBody
  --------------
  - Tells Spring to write the return value of a method directly to the HTTP response body.
  - The return value is converted to JSON or XML using HttpMessageConverters.
  - Used in REST APIs to send JSON/XML instead of rendering a view.
  - Eliminates the need for view resolution.

  Note:
  - @RestController = @Controller + @ResponseBody


- @ExceptionHandler:
  * Annotation on methods that handle specific exception types.
  * Allows writing methods to handle exceptions and customize response.

- Custom Exception:
  * User-defined exception class extending RuntimeException or Exception.
  * Used to represent domain-specific errors (e.g., ResourceNotFoundException).

- ErrorResponse DTO:
  * Plain Java class to structure error info sent to clients.
  * Common fields: message, status, timestamp, path, error code, etc.

-------------------------------------------------------------------------------
3. WHY USE THIS STRUCTURE?
-------------------------------------------------------------------------------
- Centralized error handling: no need to repeat try-catch in every controller.
- Custom exceptions help express specific errors.
- Consistent JSON response structure helps client-side error handling.
- Better control over HTTP status codes.
- Improves maintainability and readability.

-------------------------------------------------------------------------------
4. BASIC USAGE & EXAMPLES
-------------------------------------------------------------------------------

4.1 Custom Exception Class
--------------------------
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) {
        super(message);
    }
}

-------------------------------------------------------------------------------
4.2 ErrorResponse DTO Example
-----------------------------
package com.example.demo.dto;

import java.time.LocalDateTime;

public class ErrorResponse {
    private String message;
    private String path;
    private LocalDateTime timestamp;
    private int status;

    public ErrorResponse(String message, int status, String path) {
        this.message = message;
        this.status = status;
        this.path = path;
        this.timestamp = LocalDateTime.now();
    }
    // Getters and Setters
}

-------------------------------------------------------------------------------
4.3 Global Exception Handler with @RestControllerAdvice
-------------------------------------------------------
@RestControllerAdvice
public class GlobalExceptionHandler {

    @ExceptionHandler(ResourceNotFoundException.class)
    public ResponseEntity<ErrorResponse> handleResourceNotFound(ResourceNotFoundException ex,
                                                               HttpServletRequest request) {
        ErrorResponse error = new ErrorResponse(
            ex.getMessage(),
            HttpStatus.NOT_FOUND.value(),
            request.getRequestURI());
        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
    }

    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleAllExceptions(Exception ex,
                                                             HttpServletRequest request) {
        ErrorResponse error = new ErrorResponse(
            "Internal Server Error",
            HttpStatus.INTERNAL_SERVER_ERROR.value(),
            request.getRequestURI());
        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
    }
}

-------------------------------------------------------------------------------
5. ADDITIONAL HANDLING FEATURES
-------------------------------------------------------------------------------

5.1 @ExceptionHandler at Controller Level
-----------------------------------------
- Use inside a specific controller to handle exceptions locally.

Example:
@RestController
public class UserController {

    @GetMapping("/user/{id}")
    public User getUser(@PathVariable int id) {
        if (id < 1) throw new IllegalArgumentException("Invalid user id");
        return new User(id, "Ajay");
    }

    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<String> handleIllegalArg(IllegalArgumentException ex) {
        return ResponseEntity.badRequest().body("Error: " + ex.getMessage());
    }
}

-------------------------------------------------------------------------------
5.2 Extending ResponseEntityExceptionHandler (Built-in)
-------------------------------------------------------
- Override default Spring MVC exception handling.
- Useful for validation errors and others.

Example:
@ControllerAdvice
public class CustomExceptionHandler extends ResponseEntityExceptionHandler {

    @Override
    protected ResponseEntity<Object> handleMethodArgumentNotValid(
       MethodArgumentNotValidException ex,
       HttpHeaders headers,
       HttpStatus status,
       WebRequest request) {

       Map<String, String> errors = new HashMap<>();
       ex.getBindingResult().getFieldErrors().forEach(error -> {
           errors.put(error.getField(), error.getDefaultMessage());
       });

       return new ResponseEntity<>(errors, HttpStatus.BAD_REQUEST);
    }
}

-------------------------------------------------------------------------------
5.3 @ResponseStatus on Custom Exceptions
---------------------------------------
- Annotate custom exceptions with @ResponseStatus to auto-assign HTTP status codes.

Example:
@ResponseStatus(HttpStatus.NOT_FOUND)
public class BookingNotFoundException extends RuntimeException {
    public BookingNotFoundException(String msg) {
        super(msg);
    }
}

-------------------------------------------------------------------------------
6. THROWING CUSTOM EXCEPTIONS IN SERVICE LAYER
-------------------------------------------------------------------------------
@Service
public class BookingService {

    public Booking findBookingById(int id) {
        Booking booking = bookingRepo.findById(id);
        if (booking == null)
            throw new BookingNotFoundException("Booking not found: " + id);
        return booking;
    }
}

-------------------------------------------------------------------------------
7. EXCEPTION RESPONSE STRUCTURE & BEST PRACTICES
-------------------------------------------------------------------------------
- Return structured JSON with error details:
  {
    "timestamp": "2025-07-24T12:34:56",
    "status": 404,
    "error": "Not Found",
    "message": "Booking not found: 10",
    "path": "/booking/10"
  }

- Best practices:
  * Use @ControllerAdvice/@RestControllerAdvice for global handling.
  * Return meaningful HTTP status codes.
  * Log exceptions appropriately.
  * Donâ€™t expose sensitive info in error messages.
  * Handle validation exceptions properly.
  * Use ResponseEntity to customize responses.
  * Use ResponseStatusException for quick exception throwing with status.
  * Always log errors with stack trace (SLF4J, Logback).
  * Use @Valid/@Validated for request validation and handle MethodArgumentNotValidException.
  * Keep fallback handler for unexpected exceptions.

-------------------------------------------------------------------------------
8. COMMON EXCEPTIONS TO HANDLE
-------------------------------------------------------------------------------
- ResourceNotFoundException (custom)
- IllegalArgumentException
- MethodArgumentNotValidException (validation errors)
- DataIntegrityViolationException (DB errors)
- AccessDeniedException (security)
- AuthenticationException (security)
- ResponseStatusException (manual exception with status)

-------------------------------------------------------------------------------
9. INTERVIEW QUESTIONS - MOST ASKED ON SPRING BOOT EXCEPTION HANDLING
-------------------------------------------------------------------------------
Q1. What is exception handling? Why is it important?
Q2. What is the difference between checked and unchecked exceptions in Java?
Q3. How does Spring Boot handle exceptions by default?
Q4. What is @ControllerAdvice and how does it work?
Q5. How is @RestControllerAdvice different from @ControllerAdvice?
Q6. How do you create and use custom exceptions?
Q7. What is @ExceptionHandler and how to use it?
Q8. How can you handle validation errors globally in Spring Boot?
Q9. How do you send custom HTTP status codes with exception handling?
Q10. What is the role of ErrorResponse or similar DTO in exception handling?
Q11. What is the difference between throwing and catching exceptions?
Q12. How can you handle exceptions thrown from service layer in controller layer?
Q13. How do you handle multiple exceptions in one handler method?
Q14. What are some best practices for exception handling in production?
Q15. How to log exceptions and stack traces properly in Spring Boot?

-------------------------------------------------------------------------------
10. SUMMARY
-------------------------------------------------------------------------------
- Always create domain-specific custom exceptions.
- Use @RestControllerAdvice + @ExceptionHandler for global handling.
- Structure error response with DTO for clarity.
- Handle common exceptions like validation, resource not found, DB errors.
- Keep fallback handler for unexpected exceptions.
- Validate inputs and handle validation exceptions.
- Log errors properly for troubleshooting.
- Design error messages meaningful for clients and developers.

===============================================================================
