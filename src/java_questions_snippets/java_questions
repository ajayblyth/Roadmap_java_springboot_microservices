=====================================================================
#        50 MOST ASKED JAVA INTERVIEW QUESTIONS (With Snippets)     #
=====================================================================

1. What is the difference between JDK, JRE, and JVM?

JDK:java development kit
Includes JRE + development tools (compiler javac, debugger, etc.).
Used to develop and run Java applications.

JRE: java runtime environment
Provides environment to run Java programs only (no development tools).
Includes JVM + core Java libraries.

Java Standard Edition APIs, for example:
java.lang (basic language classes like String, Math, System)
java.util (collections, date/time, utilities)
java.io (input/output streams, file handling)
java.net (networking)
java.nio (new IO, buffers)
java.math (BigInteger, BigDecimal)
javax.crypto (cryptography)
These libraries provide core functionality needed to run most Java applications.

JVM:java virtual machine
Runs Java bytecode (.class files) on any platform.
Loads, verifies, executes bytecode, and manages memory (garbage collection).
Provides platform independence.

2. What is a Class and Object?

- Class: Blueprint/template defining data (fields) and behavior (methods).
- Object: Instance of a class created in memory, representing a real-world entity.

Example:
class Car {
    String model;
    void drive() { System.out.println("Driving..."); }
}

Car c = new Car();  // c is an object of class Car


3. What are Constructors in Java?

- Special methods called when an object is created to initialize it.
- Name same as class, no return type.
- Can be default (no-arg) or parameterized.

Example:
class Demo {
    Demo() { System.out.println("Constructor called"); }
}

4. Constructor vs Method?
   - Constructor: No return type, name = class.
   - Method: Has return type.

5. Can a class have multiple constructors?
   class Demo {
       Demo() {}
       Demo(int x) {}
   }

6. What is constructor overloading?
   - Multiple constructors with different parameters.

7. Can a constructor be private?
   - Yes, in Singleton pattern.
   class Singleton {
       private Singleton() {}
   }

8. What is the static keyword?
   - Belongs to class, not object.
   static int count = 0;

9. Static block usage?
   static {
       System.out.println("Runs before main()");
   }

   //not common in use but spring has other ways

   Spring Boot Initialization Methods:

   1. @PostConstruct
      - Method annotated with @PostConstruct runs once after the bean is fully initialized.
      - Used for any setup tasks after dependencies are injected.

   2. @Bean Initialization Methods
      - In @Configuration classes, methods annotated with @Bean create and configure beans.
      - Can specify initMethod attribute for custom initialization logic.

   3. ApplicationRunner / CommandLineRunner
      - Interfaces whose run() method executes after Spring Boot application starts.
      - Useful for running code right after startup (e.g., loading initial data).

   4. @Configuration and @Component
      - Classes annotated with @Configuration or @Component are auto-scanned and instantiated by Spring.
      - Spring manages their lifecycle and initialization automatically.

   5. Constructor Injection
      - Spring injects dependencies via constructor, ensuring objects are ready to use after creation.

   6. Environment / Properties Initialization
      - Use application.properties/yml to configure properties loaded automatically by Spring.

   Summary:
   Spring manages object lifecycle and initialization using annotations and interfaces,
   making static blocks mostly unnecessary in Spring Boot projects.


10. What is 'final' keyword?

- final variable: value assigned once, cannot be changed (constant).
- final method: cannot be overridden by subclasses.
- final class: cannot be subclassed/inherited.

Example:
final int MAX = 100;           // constant variable
final void display() { }       // method cannot be overridden
final class Utils { }          // class cannot be extended


11. Difference between '==' and '.equals()'?
    String a = new String("test");
    String b = new String("test");
    a == b ‚Üí false, a.equals(b) ‚Üí true

12. What is a String in Java?
    - Immutable object of characters.

13. StringBuffer vs StringBuilder?

- StringBuffer:
  * Thread-safe (synchronized).
  * Safe in multi-threaded code.
  * Slightly slower.

Example:
StringBuffer sb = new StringBuffer("Hello");
sb.append(" World");       // add text
sb.insert(5, ",");         // insert comma after Hello,
sb.replace(6, 11, "Java"); // replace "World" with "Java"
- Replaces substring from index 6 (inclusive) to 11 (exclusive) with "Java".

sb.delete(5, 6);           // delete comma
String result = sb.toString();

- StringBuilder:
  * Not thread-safe.
  * Faster in single-threaded code.

Example:
StringBuilder sb = new StringBuilder("Hello");
sb.append(" World");
sb.insert(5, ",");
sb.replace(6, 11, "Java");
sb.delete(5, 6);
String result = sb.toString();

Summary:
Use StringBuffer if thread safety needed; else StringBuilder for better speed.


14. What is method overloading?
    void show(int a) {}
    void show(String b) {}

15. What is method overriding?
    class A {
    void display() {}
    }
    class B extends A {
     void display() {}
      }

      +------------------------+-------------------------------+------------------------------+
      | Feature               | Method Overloading             | Method Overriding            |
      +------------------------+-------------------------------+------------------------------+
      | Definition             | Same method name,              | Same method name,             |
      |                        | different parameters           | same parameters               |
      +------------------------+-------------------------------+------------------------------+
      | Class Scope            | Happens in the **same class**  | Happens in **subclass**       |
      |                        | (or inherited too)             | (modifying superclass method) |
      +------------------------+-------------------------------+------------------------------+
      | Parameters             | Must be **different**          | Must be **same**              |
      +------------------------+-------------------------------+------------------------------+
      | Return Type            | Can be same or different       | Must be **same or covariant** |
      +------------------------+-------------------------------+------------------------------+
      | Purpose                | To perform different tasks     | To change behavior of parent  |
      |                        | with different inputs          | method in subclass            |
      +------------------------+-------------------------------+------------------------------+
      | Binding Time           | **Compile-time (Static)**      | **Runtime (Dynamic)**         |
      +------------------------+-------------------------------+------------------------------+
      | Inheritance Required?  | ‚ùå Not required                 | ‚úÖ Must involve inheritance    |
      +------------------------+-------------------------------+------------------------------+
      | Polymorphism Type      | Compile-time polymorphism      | Runtime polymorphism          |
      +------------------------+-------------------------------+------------------------------+

class Animal {
    void sound() {
        System.out.println("Animal makes sound");
    }
}

class Dog extends Animal {
    @Override
    void sound() {
        System.out.println("Dog barks");
    }

    void parentSound() {
        super.sound();  // calling parent method explicitly
    }
}

public class Main {
    public static void main(String[] args) {
        Animal a = new Dog();  // Reference is Animal, object is Dog
        a.sound();             // Output: Dog barks (Overridden version)

        Dog d = new Dog();
        d.sound();             // Output: Dog barks
        d.parentSound();       // Output: Animal makes sound (calling parent version)
    }
}


16. What is abstraction?
    - Hiding implementation, showing functionality.
    abstract class Shape {
    abstract void draw();
    }

    1. Abstract Class Rules:
       - If a class **extends** an abstract class:
         üëâ It must implement **all abstract methods** of that class.
       - If it does NOT implement all methods, it must itself be declared abstract.

    2. Interface Rules:
       - If a class **implements** an interface:
         üëâ It must implement **all abstract methods** of the interface.
       - Interfaces in Java 8+ can have:
         - **default methods** (with body)
         - **static methods** (can have body) cannot override
         - But still, all **abstract methods** must be implemented by the class.

    3. Key Differences:
       - Abstract class can have constructors, state (fields), and both abstract + non-abstract methods.
       - Interface is for full abstraction (until Java 7), and a class can implement **multiple interfaces**.

    Example:

    interface Flyable {
        void fly();
    }

    class Bird implements Flyable {
        public void fly() {
            System.out.println("Bird flies");
        }
    }


17. Interface vs Abstract class?
    interface A {
    void run();
    }
    abstract class B {
    abstract void run();
    }

18. Can interface have concrete methods?
    - Yes, default/static/private from Java 8+.

19. What is encapsulation?
    - Wrapping data with code using private fields + public getters/setters.

20. What is inheritance?
    class A {}
    class B extends A {}

21. Multiple inheritance in Java?
    - Not allowed with classes, allowed via interfaces.

22. What is polymorphism?
    - Compile-time (overloading), Run-time (overriding)

23. What is instanceof?
    Animal a = new Dog();
    if (a instanceof Dog) {
        System.out.println("a is a Dog");
    }
    - Helps avoid ClassCastException before downcasting.

24. What is Exception Handling?
    try {
    int x = 5 / 0; 
    }
     catch (ArithmeticException e) {}

25. Difference between Checked and Unchecked exceptions?
    - Checked: IOException, SQLException (compile-time)
    - Unchecked: NullPointerException, ArithmeticException (runtime)

26. Custom Exception example?
    class MyException extends Exception {
        MyException(String msg) { super(msg); }
    }

27. What is 'finally' block?
    - Always executes
    try {} catch() {} finally {}

28. What is try-with-resources?
    try (FileReader fr = new FileReader("file.txt")) {}

29. What is Collection framework?
    - Interfaces: List, Set, Map etc.
    - Classes: ArrayList, HashSet, HashMap etc.

30. ArrayList vs LinkedList?
    - ArrayList: faster for access.
    - LinkedList: better for insert/delete.

31. HashMap vs Hashtable?
    - HashMap: not thread-safe.
    - Hashtable: thread-safe, slower.

32. Set vs List?
    - List allows duplicates, Set does not.

33. What is HashSet?
    Set<String> set = new HashSet<>();

34. TreeSet vs HashSet?
    - TreeSet: sorted.
    - HashSet: unordered.

35. What is Map interface?
    Map<Integer, String> map = new HashMap<>();

36. How to iterate Map?
    for (Map.Entry<Integer, String> e : map.entrySet()) {
        System.out.println(e.getKey() + " " + e.getValue());
    }

37. Fail-fast vs Fail-safe?
    - Fail-fast: throws ConcurrentModificationException
    - Fail-safe: uses copy

38. What is Comparable?
    class Student implements Comparable<Student> {
        public int compareTo(Student s) { return this.id - s.id; }
    }

39. What is Comparator?
    Collections.sort(list, (a, b) -> a.name.compareTo(b.name));

40. What is multithreading?
    class MyThread extends Thread {
        public void run() { System.out.println("Running..."); }
    }

41. Difference between Thread and Runnable?
    Thread ‚Üí extends Thread
    Runnable ‚Üí implements Runnable

42. Synchronized method?
    synchronized void print() { ... }

43. Volatile keyword?
    - Tells JVM to read from main memory

44. What is deadlock?
    - Two threads holding lock, waiting for each other

45. What is Stream API?
    list.stream().filter(x -> x > 10).collect(Collectors.toList());

46. Optional usage?
    Optional.ofNullable(obj).orElse("default");

47. Lambda expression?
    (a, b) -> a + b;

48. Functional interface?
    interface MyFunc { void apply(); }

49. Serialization?
    ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("file"));

50. Java 8 new features?
    - Lambda, Stream, Optional, Method refs, Default methods

=====================================================================

================================================================================
              JAVA INTERVIEW QUESTIONS ‚Äì PART 2 (51‚Äì100)
================================================================================

 51. What is a volatile keyword in Java?
     ‚û§ Guarantees visibility of changes across threads.
     ‚û§ Used in multithreading.
     ‚û§ Prevents caching of variable.

 52. What is the difference between synchronized method and synchronized block?
     ‚û§ Method locks whole object.
     ‚û§ Block allows finer-grained control (only a part is locked).

 53. Explain the Java Memory Model (JMM)?
     ‚û§ Defines interaction of threads with memory.
     ‚û§ Covers visibility, atomicity, ordering of variables.

 54. What is a ThreadLocal?
     ‚û§ Provides thread-confined variables.
     ‚û§ Each thread has its own isolated copy.

 55. Difference between HashMap and ConcurrentHashMap?
     ‚û§ HashMap is not thread-safe.
     ‚û§ ConcurrentHashMap uses segmentation/locking for thread safety.

 56. What is the use of Callable vs Runnable?
     ‚û§ Runnable: returns nothing.
     ‚û§ Callable: returns result and can throw exceptions.

 57. What is ExecutorService in Java?
     ‚û§ Framework to manage and execute threads efficiently.

 58. What is ForkJoinPool?
     ‚û§ Part of java.util.concurrent.
     ‚û§ Used for parallelism via divide-and-conquer.

 59. What is the difference between wait() and sleep()?
     ‚û§ wait() ‚Üí releases lock, used with notify.
     ‚û§ sleep() ‚Üí doesn‚Äôt release lock.

 60. Explain the producer-consumer problem solution in Java.
     ‚û§ Can use BlockingQueue or wait/notify pattern.

 61. What is the purpose of Object.wait() and Object.notify()?
     ‚û§ Used for communication between threads on the same object monitor.

 62. How does HashMap handle collisions?
     ‚û§ Uses linked list (Java 7) or red-black tree (Java 8+) on hash conflict.

 63. How does ConcurrentHashMap handle concurrency internally?
     ‚û§ Bucket-level locking / segment-based locks.

 64. What is identity hash code?
     ‚û§ Default hashcode from `System.identityHashCode(obj)`, not overridden.

 65. Difference between fail-fast and fail-safe iterators?
     ‚û§ Fail-fast ‚Üí throws ConcurrentModificationException.
     ‚û§ Fail-safe ‚Üí uses copy-on-write or snapshot.

 66. What is CopyOnWriteArrayList?
     ‚û§ Thread-safe version of ArrayList.
     ‚û§ On write: new copy of the array is made.

 67. What are Phantom, Weak, and Soft references?
     ‚û§ Different levels of reachability for GC handling.

 68. Explain finalize() method and why it is deprecated.
     ‚û§ Called before GC, not reliable ‚Üí replaced by Cleaner API.

 69. What are functional interfaces?
     ‚û§ Interfaces with single abstract method.
     ‚û§ Used in lambda expressions. Example: Runnable, Callable, Function.

 70. What are some built-in functional interfaces in Java 8?
     ‚û§ Function<T,R>, Consumer<T>, Supplier<T>, Predicate<T>.

 71. What is method reference in Java?
     ‚û§ A shorthand for lambda.
     ‚û§ Syntax: `ClassName::methodName`

 72. What is Stream API?
     ‚û§ Functional-style operations on collections (filter, map, reduce).

 73. Difference between intermediate and terminal operations in streams?
     ‚û§ Intermediate ‚Üí returns Stream (lazy), Terminal ‚Üí triggers computation.

 74. How to handle checked exceptions in lambda?
     ‚û§ Use try-catch or create wrapper functional interfaces.

 75. What is Optional class?
     ‚û§ A container to avoid null checks. Provides safe API like `ifPresent()`.

 76. What is reflection in Java?
     ‚û§ Allows inspection and modification of classes, fields, methods at runtime.

 77. How do annotations work in Java?
     ‚û§ Metadata processed at compile-time or run-time using reflection.

 78. How to create custom annotation?
     ‚û§ Use @interface with retention and target metadata.

 79. What is marker interface?
     ‚û§ Interface with no methods (e.g., Serializable, Cloneable).

 80. What is serialization in Java?
     ‚û§ Converting object into byte stream. Uses ObjectOutputStream.

 81. What is transient keyword?
     ‚û§ Prevents field from being serialized.

 82. What is Externalizable interface?
     ‚û§ Allows full control over serialization with readExternal/writeExternal.

 83. What is classloader? Types?
     ‚û§ Loads classes dynamically. Types:
       ‚û§ Bootstrap, Extension, System/Application classloader.

 84. What is double-checked locking in Singleton?
     ‚û§ Avoids overhead of synchronized by checking instance twice.

 85. Difference: Singleton vs Static class?
     ‚û§ Singleton ‚Üí allows object state, uses lazy initialization.
     ‚û§ Static class ‚Üí no instantiation, stateless.

 86. Explain Builder Design Pattern.
     ‚û§ Used to construct complex objects with readable chained methods.

 87. What is Dependency Injection?
     ‚û§ External objects injected into class (e.g., via constructor/setter).

 88. What are varargs in Java?
     ‚û§ Method that accepts variable number of arguments: `void test(int... nums)`

 89. What are enums in Java? Can they have fields/methods?
     ‚û§ Special class type. Yes, can have fields, constructors, methods.

 90. What is the purpose of assert keyword?
     ‚û§ Used for debugging via runtime assertions.

 91. What is AutoCloseable?
     ‚û§ Interface used in try-with-resources for automatic closing.

 92. What is the difference between == and equals()?
     ‚û§ == compares reference, equals() compares object content.

 93. Can we override static methods?
     ‚û§ No, static methods belong to class, not instance.

 94. What is the diamond problem? Does Java support multiple inheritance?
     ‚û§ Problem in multiple inheritance (solved using interfaces in Java).

 95. What is memory leak in Java?
     ‚û§ Unused objects are referenced and not garbage collected.

 96. How to detect memory leaks in Java?
     ‚û§ Use profilers like VisualVM, Eclipse MAT, or jconsole.

 97. What is Metaspace in Java 8+?
     ‚û§ Replacement of PermGen. Stores class metadata.

 98. Explain Java Records (Java 14+).
     ‚û§ Immutable data classes with compact syntax.

 99. What is pattern matching in switch (Java 17+)?
     ‚û§ Allows matching object types in switch-case.

100. What is sealed class/interface (Java 17+)?
     ‚û§ Restricts which classes can extend or implement it.

================================================================================
